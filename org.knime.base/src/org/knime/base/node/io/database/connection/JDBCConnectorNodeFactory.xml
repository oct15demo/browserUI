<?xml version="1.0" encoding="UTF-8"?>
<knimeNode xmlns="http://knime.org/node/v2.10" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://knime.org/node/v2.10 http://knime.org/node/v2.10"  icon="./db_jdbc_connector.png" type="Source">
    <name>Database Connector</name>
    <shortDescription>Create a database connection to any JDBC database.</shortDescription>
    <fullDescription>
        <intro>
            This node creates a connection to an arbitrary JDBC database. You need to select an appropriate driver
            (if not available, add your vendor-specific driver under File > Preferences > KNIME > Database Driver) and 
            the JDBC URL of the database (which is database specific). Login credentials can either be provided directly
            in the configuration or via credentials set on the workflow.
        </intro>
        <tab name="Connection settings">
            <option name="Database Driver">
                Enter the database driver here; it is a Java class (including the package path), for example: 
                sun.jdbc.odbc.JdbcOdbcDriver
                Additional driver can be registered via KNIME's preference page (Database Driver).
            </option>
            <option name="Database URL">
                Enter the database name here, for example jdbc:odbc:database_name or jdbc:mysql://host:port/database_name
            </option>
            <option name="Workflow Credentials">
                If checked, the credentials (user and password) are used as defined on the workflow. The credential name 
                links to the specified user and password. Those can be replaced or edit using the 'Workflow Credentials'
                menu available in the workflow context menu.
            </option>
            <option name="User Name">
                Your log-in user name for the database.
            </option>
            <option name="Password">
                Your log-in password for the database. Note, the password is de- and encrypted before handling it internally.
            </option>
            <option name="TimeZone">
                Select the TimeZone to convert the date, time or timestamp field into. The current implementation can't 
                represent time zones. In order to support persisting those fields into a database, the time values can be 
                changed according to the selected time zone, which is used as the offset (including the daylight saving time)
                for the original values: <i>No Correction (use UTC)</i> is used for workflows (created before 2.8) and doesn't
                apply any correction, <i>Use local TimeZone</i> uses the local time zone offset to correct the date field 
                before reading or writing, and <i>TimeZone: </i> allows selecting the time zone to covert the date values into.  
            </option>
            <option name="Allow spaces in column names">
                Check this option if the database can handle spaces in column names. Otherwise KNIME will replaces them by
                underscores.
            </option>
            <option name="Validate connection on close">
                Check this option if you want to validate the connection when closing the dialog.
            </option>
            <option name="Retrieve metadata in configure">
                This option controls subsequent nodes. Usually when a database node is configured it retrieves the metadata of the
                current table or query from the database for usage in subsequent nodes. If metadata retrieval takes quite
                some time it will slow down workflow configuration and execution noticeably, especially since metadata is
                retrieved in both configure and execute. In such cases it's better to switch this option off and
                only retrieve metadata during execute.
            </option>
        </tab>
        <tab name="Advanced">
            <option name="Database Type">
                <p>
                This option allows you to explicitly define the type of database the node connects to. 
                Depending on the database type the sql dialect, the supported data types and functions such as 
                insert, update and delete as well as the aggregation functions might differ.
                </p>
                <p> 
                The standard option is '&lt;based on database URL&gt;' where the database type is determined 
                automatically based on the first part of the database URL. 
                However some databases such as Hive and Impala share the same url schema but have different 
                SQL dialects as well as offer different functionality e.g. different sets of aggregation functions. 
                For these databases you have to manually select the appropriate type from the list of supported 
                databases.
                </p>
                <p>
                If your database type is not listed either select the '&lt;based on database URL&gt;' option or the 
                'default' option, which uses standard sql syntax and basic aggregation functions. 
                The 'default' type is also used if the url is unknown.
                </p>
                <p>
                You can always verify the database type via the 'Connection' tab of the nodes database out port.
                </p>
            </option>
        </tab>
    </fullDescription>

    <ports>
        <outPort index="0" name="Database JDBC Connection">A database JDBC connection</outPort>
    </ports>    
</knimeNode>
