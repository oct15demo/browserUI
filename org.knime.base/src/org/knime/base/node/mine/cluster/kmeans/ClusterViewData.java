/*
 * ------------------------------------------------------------------------
 *
 *  Copyright by KNIME GmbH, Konstanz, Germany
 *  Website: http://www.knime.com; Email: contact@knime.com
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License, Version 3, as
 *  published by the Free Software Foundation.
 *
 *  This program is distributed in the hope that it will be useful, but
 *  WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, see <http://www.gnu.org/licenses>.
 *
 *  Additional permission under GNU GPL version 3 section 7:
 *
 *  KNIME interoperates with ECLIPSE solely via ECLIPSE's plug-in APIs.
 *  Hence, KNIME and ECLIPSE are both independent programs and are not
 *  derived from each other. Should, however, the interpretation of the
 *  GNU GPL Version 3 ("License") under any applicable laws result in
 *  KNIME and ECLIPSE being a combined program, KNIME GMBH herewith grants
 *  you the additional permission to use and propagate KNIME together with
 *  ECLIPSE with only the license terms in place for ECLIPSE applying to
 *  ECLIPSE and the GNU GPL Version 3 applying for KNIME, provided the
 *  license terms of ECLIPSE themselves allow for the respective use and
 *  propagation of ECLIPSE together with KNIME.
 *
 *  Additional permission relating to nodes for KNIME that extend the Node
 *  Extension (and in particular that are based on subclasses of NodeModel,
 *  NodeDialog, and NodeView) and that only interoperate with KNIME through
 *  standard APIs ("Nodes"):
 *  Nodes are deemed to be separate and independent programs and to not be
 *  covered works.  Notwithstanding anything to the contrary in the
 *  License, the License does not apply to Nodes, you are not required to
 *  license Nodes under the License, and you are granted a license to
 *  prepare and propagate Nodes, in each case even if such Nodes are
 *  propagated with or for interoperation with KNIME.  The owner of a Node
 *  may freely choose the license terms applicable to such Node, including
 *  when such Node is propagated with or for interoperation with KNIME.
 * ---------------------------------------------------------------------
 *
 * History
 *   03.11.2014 (thor): created
 */
package org.knime.base.node.mine.cluster.kmeans;

/**
 * This class holds the data that is displayed in the view.
 *
 * @author Thorsten Meinl, KNIME.com, Zurich, Switzerland
 */
final class ClusterViewData {
    private final double[][] m_clusters; // clusters generated by the algorithm

    private final int[] m_clusterCoverage; // #patterns covered by each cluster

    private final int m_nrOfUsedColumns;

    private final String[] m_featureNames; // names of the cluster features

    // e.g. the names of the actually used columns

    ClusterViewData(final double[][] clusters, final int[] clusterCoverage, final int nrOfUsedColumns,
        final String[] featureNames) {
        m_clusters = clusters;
        m_clusterCoverage = clusterCoverage;
        m_nrOfUsedColumns = nrOfUsedColumns;
        m_featureNames = featureNames;

    }

    /**
     * Returns the number of clusters.
     *
     * @return the number of clusters.
     */
    int getNrOfClusters() {
        return m_clusters.length;
    }

    /**
     * Returns the number of used columns for clustering.
     *
     * @return the number of used columns
     */
    int getNrOfUsedColumns() {
        return m_nrOfUsedColumns;
    }

    /**
     * Returns the name of the i-th feature
     * @param i the feature index
     *
     * @return a feature name
     */
    String getFeatureName(final int i) {
        return m_featureNames[i];
    }

    /**
     * Returns the prototype vector of cluster c.
     *
     * @param c index of cluster
     * @return array of doubles holding prototype vector
     */
    double[] getClusterCenter(final int c) {
        return m_clusters[c];
    }

    /**
     * Returns the coverage of a cluster.
     *
     * @param c index of cluster
     * @return number of patterns covered by a cluster
     */
    int getClusterCoverage(final int c) {
        return m_clusterCoverage[c];
    }

    /**
     * Returns an array with all feature names. Should only be used for storing the view information in saveInternals.
     *
     * @return an array with feature names
     */
    String[] featureNames() {
        return m_featureNames;
    }

    /**
     * Returns an 2-dimensional array with all clusters and their coordinates. Should only be used for storing the view
     * information in saveInternals.
     *
     * @return the cluster coordinated
     */
    double[][] clusters() {
        return m_clusters;
    }

    /**
     * Returns an array with the number of patterns per clusters. Should only be used for storing the view
     * information in saveInternals.
     *
     * @return the cluster coverage
     */
    int[] clusterCoverage() {
        return m_clusterCoverage;
    }
}
