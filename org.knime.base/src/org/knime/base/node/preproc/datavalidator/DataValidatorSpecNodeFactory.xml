<?xml version="1.0" encoding="utf-8"?>
<knimeNode icon="./validate.png" type="Manipulator" xmlns="http://knime.org/node/v2.10"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://knime.org/node/v2.10 http://knime.org/node/v2.10.xsd">
  <name>Table Validator (Reference)</name>
  <shortDescription> Validates the input data according to a reference data table specification. </shortDescription>
  <fullDescription>
    <intro>
      This node ensures a certain table structure and table content. The base for a configuration is
      given by a reference specification which must be connected to the input port during
      configuration and provides the basic template for the output table. It is ensured that the
      result table structure is mostly identical to the reference specification. That is done by
      resorting of columns, the insertion of missing columns (filled with missing values) and
      optional removal of additional columns. You can also choose for each column (or a group of
      them) if it is required and if the data type or the domain should be checked/converted. To
      make use of this second approach, select a column or a list of columns to be handling, drag
      them to the appearing "+" button, and set the parameters. To remove this extra handling (and
      instead use the default handling), click the "Remove" button for this column. If the
      validation succeeds, data gets output to the first port (potentially renamed, sorted according
      to the reference specification and with converted types). If the validation fails, the first
      port is inactive and the second port contains a table that lists all conflicts or the node
      fails. All options mentioned below marked with
      <i>Data</i>
      forces also a traversal of the input data.
    </intro>
    <tab name="General settings">
      <option name="Behavior on validation issues">
        Defines how validation faults should influence the following workflow.
        <ul>
          <li>
            <i>Fail node</i>
            - Forces the node to fail; the exception carries a appropriate message containing
            detailed descriptions about the validation faults. A traversal of the data is canceled
            if the structural comparison already failed.
          </li>
          <li>
            <i>Deactivate first output port</i>
            - The node will never fail but the first output port is set inactive. Validation results
            are presented at the second output port as a data table which contains the
            <i>Column</i>
            name, an
            <i>Error ID (one of: COLUMN_NOT_CONTAINED, CONTAINS_MISSING_VALUE, INVALID_DATATYPE,
              CONVERTION_FAILED, OUT_OF_DOMAIN)</i>
            and an human readable
            <i>Description</i>
            for each validation fault. The data is completely traversed, independent of potential
            structural differences. This option is useful if a complete validation of the input data
            is desired. For example if the workflow is used within the WebPortal, to avoid try and
            error passes.
          </li>
        </ul>
      </option>
      <option name="Handling of unkown colums">
        Removes columns which are not included in the reference table spec.
        <ul>
          <li>
            <i>Don't allow unknown columns</i>
            - Unknown columns will force a validation issue.
          </li>
          <li>
            <i>Remove unkown columns</i>
            - Unknown columns will be removed.
          </li>
          <li>
            <i>Sort them to the end</i>
            - Unknown columns will shifted to the end of the table.
          </li>
        </ul>
      </option>
    </tab>
    <tab name="Validation Settings">
      <option name="Fail if column is missing (Structure)">
        Ensures that the configured columns exist in the input table. If
        <i>case insensitive name matching</i>
        is selected the first matching column will satisfy this condition.
      </option>
      <option name="Case insensitive name matching (Structure)">
        Also columns with an similar name will be considered to be validated according to this
        configuration. Users should take attention if using this option as the assignment from a
        column to a configuration is not trivial computed at runtime. The rules are explained in the
        following.
        <ol>
          <li>
            <i>Exact name match</i>
            - Assigns the configuration with the exact name. The name is marked as used and cannot
            match any following input columns again.
          </li>
          <li>
            <i>First matching configuration</i>
            - Assigns the first configuration to the column with a matching name, the name is marked
            as used and cannot match any following input columns again.
          </li>
        </ol>
      </option>
      <option name="Fail on missing value (Data)"> Fails if the columns contains any missing value.</option>
      <option name="Check data type (Structure|Data)">
        Ensures a correct data type.
        <ul>
          <li>
            <i>Fail if different</i>
            - Fails if the reference data type is not a super type of the input column spec. I.e. it
            checks that the input column implements all DataValue classes that are also implemented
            by the reference column's data type.
          </li>
          <li>
            <i>Try to convert; fail if not compatible</i>
          </li>
          <li>
            <i>Try to convert; insert missing if not compatible</i>
          </li>
        </ul>
      </option>
      <option name="Check possible values (Data)">
        Checks if each data object is contained in the possible values of the reference domain. The
        option is only enabled if any configured column defines possible values.
        <ul>
          <li>
            <i>Fail if out of domain</i>
          </li>
          <li>
            <i>Replace with missing values</i>
          </li>
        </ul>
      </option>
      <option name="Check min &amp; max (Data)">
        Checks if each data object is between min and max defined by the domain of the reference
        specification. The option is only enabled if any configured column defines possible values.
        <ul>
          <li>
            <i>Fail if out of domain</i>
          </li>
          <li>
            <i>Replace with missing values</i>
          </li>
        </ul>
      </option>
      <option name="Set input table as reference"> Sets the input table specification as reference specification.</option>
    </tab>
    <tab name="Reference Spec">
      <option name="Reference Spec"> The reference specification.</option>
      <option name="Input Spec"> The input specification. Only visible if it differs from the reference
        specification.
      </option>
    </tab>
  </fullDescription>
  <ports>
    <inPort index="0" name="Table to validate">Table to be validated.</inPort>
    <inPort index="1" name="Reference Table">Table that is used as the reference.</inPort>
    <outPort index="0" name="Validated table">
      Table with corrected and validated structure. Depending on the validation result and the
      <i>Behavior if validation fails</i>
      settings, this port may be inactive.
    </outPort>
    <outPort index="1" name="Validation fault table">
      Table where missing values have been handled. Depending on the validation result and the
      <i>Behavior if validation fails</i>
      settings, this port may be inactive.
    </outPort>
  </ports>
</knimeNode>