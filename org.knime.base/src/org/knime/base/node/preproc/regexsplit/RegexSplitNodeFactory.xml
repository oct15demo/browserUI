<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE knimeNode PUBLIC "-//UNIKN//DTD KNIME Node 2.0//EN" "http://www.knime.org/Node.dtd" >
<knimeNode icon="regexsplit.png" type="Manipulator">
	<name>Regex Split</name>
	<shortDescription>
		Splits an input string (column) into multiple groups according
		to a regular expression.
	</shortDescription>
	<fullDescription>
		<intro>
			<p>
				This node splits the string content of a selected column
				into logical groups using regular expressions. A group
				is identified by a pair of parentheses, whereby the
				pattern in such parentheses is a regular expression.
				Each content of each group is appended as an individual
				column.
			</p>

			<p>
				A short introduction to Groups and Capturing is given by
				in the
				<a
					href="http://java.sun.com/javase/6/docs/api/java/util/regex/Pattern.html#cg">
					Java API
				</a>
				. Some examples are given below:
			</p>
			<h4>Parsing Patent Numbers</h4>
			<p>
				Patent identifiers such as "US5443036-X21" consisting of
				a (at most) two letter country code ("US"), a patent
				number ("5443036") and possibly some application code
				("X21"), which is separated by a dash or a space
				character, can be grouped by the expression
				<tt>([A-Za-z]{1,2})([0-9]*)[ \-]*(.*$)</tt>.
				Each of the parenthesized terms corresponds to the
				aforementioned properties.
			</p>
			<h4>Strip File URLs</h4>
			<p>
				This is particularly useful when this node is used to
				parse the file URL of a file reader node (the URL is
				exposed as flow variable and then exported to a table
				using a Variable to Table node). The format of such
				URLs is similar to "file:c:\some\directory\foo.csv".
				Using the pattern
				<tt>[A-Za-z]*:(.*[/\\])(([^\.]*)\.(.*$))</tt>
				generates four groups (by counting the number of opening
				parentheses): The first group identifies the directory
				and is denoted by "(.*[/\\])". It consumes all characters
				until a final slash or backslash is encountered; in the example
				this refers to "c:\some\directory\". The second group
				represents the file name, whereby it encapsulates the
				third and fourth group. The third group (denoted by
				"([^\.]*)") consumes all characters after the directory,
				which are not a dot '.' (which is "foo" in the
				above example). The pattern expects a single dot
				(which is ignored) and finally the fourth group "(.*$)",
				which reads until the end of the string and indicates
				the file suffix ('csv'). The groups for the above
				example are
				<ol>
					<li>c:\some\directory</li>
					<li>foo.csv</li>
					<li>foo</li>
					<li>csv</li>
				</ol>
			</p>
		</intro>
		<option name="Ignore Case">
			Enables case-insensitive matching.
		</option>
		<option name="Multiline">
			Enables multiline mode, i.e. when selected the expression ^
			and $ match the start and end of the input string. This
			option only matters if the input string have line breaks.
		</option>
	</fullDescription>
	<ports>
		<inPort index="0" name="Data table">
			Input table with string column to be split.
		</inPort>
		<outPort index="0" name="Input with split columns">
			Input table amended by additional column representing the
			pattern groups.
		</outPort>
	</ports>
</knimeNode>
