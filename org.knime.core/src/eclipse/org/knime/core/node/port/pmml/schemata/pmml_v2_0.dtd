<!--        PMML 2.0 dtd                                                 -->


<!-- =========     PMML element       ================================== -->

   <!ENTITY % A-PMML-MODEL "( TreeModel | NeuralNetwork | ClusteringModel |
      RegressionModel | GeneralRegressionModel | NaiveBayesModel |
      AssociationModel | SequenceModel )" >

   <!ELEMENT PMML ( Header, MiningBuildTask?,  DataDictionary,
      TransformationDictionary?, ( %A-PMML-MODEL; )*, Extension* ) >

   <!ATTLIST PMML
        version       CDATA           #REQUIRED
    >
   <!ELEMENT MiningBuildTask (Extension*) > 

   <!ELEMENT Extension ANY >
   <!ATTLIST Extension
         extender     CDATA             #IMPLIED
         name         CDATA             #IMPLIED
         value        CDATA             #IMPLIED
   >


<!-- =========  Entity definitions    ================================== -->

   <!ENTITY  % NUMBER  "CDATA" >
   <!ENTITY  % INT-NUMBER  "CDATA">
         <!-- content must be an integer, no fractions or exponent -->
   <!ENTITY  % REAL-NUMBER  "CDATA">
         <!-- content can be any number
              covers C/C++ types 'float','long','double'
              scientific notation, eg 1.23e4, is allowed  -->
   <!ENTITY  % PROB-NUMBER  "CDATA">
         <!-- a REAL-NUMBER between 0.0 and 1.0
              usually describing a probability  -->
   <!ENTITY  % PERCENTAGE-NUMBER  "CDATA">
         <!-- a REAL-NUMBER between 0.0 and 100.0  -->


   <!ENTITY % FIELD-NAME  "CDATA">


   <!ELEMENT Array (#PCDATA) >
   <!ATTLIST Array
      n   %INT-NUMBER;  #IMPLIED
      type  ( int| real| string ) #IMPLIED
   >


   <!ENTITY  % NUM-ARRAY  "Array">
         <!-- an array of numbers -->
   <!ENTITY  % INT-ARRAY  "Array">
         <!-- an array of integers -->
   <!ENTITY  % REAL-ARRAY  "Array">
         <!-- an array of reals -->
   <!ENTITY  % STRING-ARRAY  "Array">
         <!-- an array of strings -->

   <!-- Mining function definition                                      -->
   <!ENTITY % MINING-FUNCTION '(associationRules | sequences |
       classification | regression | clustering )' >


<!-- =========      Header        ================================== -->

   <!ELEMENT Header (Application?, Annotation*, Timestamp?)>

   <!ATTLIST Header
       copyright    CDATA #REQUIRED
       description  CDATA #IMPLIED
   >

   <!-- describes the software application that generated the PMML-->
   <!ELEMENT Application EMPTY>

   <!ATTLIST Application
       name       CDATA #REQUIRED
       version    CDATA #IMPLIED
   >

   <!ELEMENT Annotation (#PCDATA)>

   <!-- a timestamp in the format YYYY-MM-DD hh:mm:ss GMT +/- xx:xx -->
   <!ELEMENT Timestamp (#PCDATA)>




<!-- =========      Data Dictionary      =========================== -->

<!ELEMENT DataDictionary (Extension*, DataField+, Taxonomy* ) >
<!ATTLIST DataDictionary
    numberOfFields    %INT-NUMBER;                       #IMPLIED
>
<!ELEMENT DataField  ( Extension*, (Interval*| Value*) ) >
<!ATTLIST DataField
    name              %FIELD-NAME;                       #REQUIRED
    displayName       CDATA                              #IMPLIED
    optype       ( categorical | ordinal | continuous )  #REQUIRED
    taxonomy          CDATA                              #IMPLIED
    isCyclic          ( 0 | 1 )                          "0"
>

<!ELEMENT Value (Extension* ) >
<!ATTLIST Value
    value             CDATA                              #REQUIRED
    displayValue      CDATA                              #IMPLIED
    property          (valid | invalid | missing )       "valid"
>


   <!ELEMENT Interval  EMPTY>
   <!ATTLIST Interval
       closure     ( openClosed | openOpen | closedOpen | closedClosed )  #REQUIRED
       leftMargin     %NUMBER;                           #IMPLIED
       rightMargin    %NUMBER;                           #IMPLIED
   >

<!-- =============== Taxonomy ====================== -->

<!ELEMENT Taxonomy ( ChildParent+ ) > 
<!ATTLIST Taxonomy 
   name                  CDATA                           #REQUIRED 
> 
<!ENTITY % TABLE    "( TableLocator | InlineTable ) " > 
<!ELEMENT ChildParent   ( %TABLE; ) > 
<!ATTLIST ChildParent 
      childField              CDATA                     #REQUIRED 
      parentField             CDATA                     #REQUIRED 
      parentLevelField        CDATA                     #IMPLIED 
      isRecursive             (no | yes)                "no" 
> 
<!ELEMENT TableLocator (Extension*) > 
<!ELEMENT InlineTable (Extension*) > 


<!-- =============== Transformation Dictionary ====================== -->

<!ELEMENT TransformationDictionary ( Extension*, DerivedField* ) >

<!-- Expression for derived field.                                   -->
   <!ENTITY % EXPRESSION "( Constant | FieldRef | NormContinuous |
    NormDiscrete | Discretize | MapValues | Aggregate )" >

<!ELEMENT Constant ( Value ) >

<!ELEMENT DerivedField (Extension*, %EXPRESSION; )>
<!ATTLIST DerivedField
    name                  %FIELD-NAME;                      #IMPLIED
    displayName           CDATA                             #IMPLIED
>
<!ELEMENT   NormContinuous ( Extension*, LinearNorm* ) >
<!ATTLIST   NormContinuous
    field                 %FIELD-NAME;                      #REQUIRED
>
<!ELEMENT    LinearNorm   EMPTY >
<!ATTLIST    LinearNorm
    orig                  %NUMBER;                          #REQUIRED
    norm                  %NUMBER;                          #REQUIRED
>
<!ELEMENT    NormDiscrete ( Extension* ) >
<!ATTLIST    NormDiscrete
    field                 %FIELD-NAME;                      #REQUIRED
    method                ( indicator | thermometer )       #FIXED "indicator"
    value                 CDATA                             #REQUIRED
>
<!ELEMENT    FieldRef    EMPTY >
<!ATTLIST    FieldRef
    field                 %FIELD-NAME;                      #REQUIRED
>

<!ELEMENT     Discretize      (DiscretizeBin+) >
<!ATTLIST     Discretize
    field     %FIELD-NAME;                                  #REQUIRED
>
<!ELEMENT   DiscretizeBin    (Interval) >
<!ATTLIST      DiscretizeBin
    binValue  CDATA                                         #REQUIRED
>

<!ELEMENT     MapValues          (FieldColumnPair+, %TABLE; ) >
<!ATTLIST     MapValues
    outputColumn        CDATA                               #REQUIRED
    defaultValue        CDATA                               #IMPLIED
>
<!ELEMENT   FieldColumnPair  EMPTY >
<!ATTLIST     FieldColumnPair
    field     %FIELD-NAME;                                  #REQUIRED
    column    CDATA                                         #REQUIRED
>

<!ELEMENT     Aggregate      EMPTY >
<!ATTLIST     Aggregate
    field       %FIELD-NAME;                                     #REQUIRED
    function    (count | sum | average | min | max| multiset)    #REQUIRED
    groupField  %FIELD-NAME;                                     #IMPLIED
    sqlWhere    CDATA                                            #IMPLIED
>


<!-- =========      Mining Schema      =========================== -->


<!ELEMENT MiningSchema (Extension*, MiningField+) >

<!ENTITY  % FIELD-USAGE-TYPE "(active | predicted | supplementary)" >

<!ENTITY  % OUTLIER-TREATMENT-METHOD "(asIs | asMissingValues | asExtremeValues)" >

<!ELEMENT MiningField (Extension*) >
<!ATTLIST MiningField
        name            %FIELD-NAME;                    #REQUIRED
        usageType       %FIELD-USAGE-TYPE;              "active"
        outliers        %OUTLIER-TREATMENT-METHOD;      "asIs"
        lowValue        %NUMBER;                        #IMPLIED
        highValue       %NUMBER;                        #IMPLIED
>


<!-- =========      Statistics      =========================== -->


<!ELEMENT ModelStats  ( Extension*, UnivariateStats+ ) >


<!ENTITY  % AGGREGATE "(Counts?, NumericInfo?)" >

<!ELEMENT UnivariateStats ( Extension*, (%AGGREGATE;)?, DiscrStats?, ContStats? ) >
<!ATTLIST UnivariateStats
     field            %FIELD-NAME;                      #IMPLIED
>


<!ELEMENT Counts EMPTY>
<!ATTLIST Counts
        totalFreq          %NUMBER;                     #REQUIRED
        missingFreq        %NUMBER;                     #IMPLIED
        invalidFreq        %NUMBER;                     #IMPLIED
>

<!ELEMENT NumericInfo (Quantile*) >
<!ATTLIST NumericInfo
        minimum                 %NUMBER;                #IMPLIED
        maximum                 %NUMBER;                #IMPLIED
        mean                    %NUMBER;                #IMPLIED
        standardDeviation       %NUMBER;                #IMPLIED
        median                  %NUMBER;                #IMPLIED
        interQuartileRange      %NUMBER;                #IMPLIED
>

<!ELEMENT Quantile EMPTY>
<!ATTLIST Quantile
        quantileLimit       %PERCENTAGE-NUMBER;         #REQUIRED
        quantileValue       %NUMBER;                    #REQUIRED
>

<!ELEMENT DiscrStats (Extension*, (%STRING-ARRAY;)?, (%INT-ARRAY;)? ) >
<!ATTLIST DiscrStats
        modalValue          CDATA                       #IMPLIED
>


<!ELEMENT ContStats ( Extension*, Interval*, (%INT-ARRAY;)?, (%NUM-ARRAY;)?, (%NUM-ARRAY;)? )>
<!ATTLIST ContStats
        totalValuesSum      %NUMBER;                    #IMPLIED
        totalSquaresSum     %NUMBER;                    #IMPLIED
>


<!ELEMENT Partition (PartitionFieldStats+) >
<!ATTLIST Partition
        name                CDATA                       #REQUIRED
        size                %NUMBER;                    #IMPLIED
>

<!ELEMENT PartitionFieldStats (%AGGREGATE;, (%NUM-ARRAY;)*) >
<!ATTLIST PartitionFieldStats
        field               %FIELD-NAME;                #REQUIRED
>





<!-- =========      Neural network      =========================== -->

<!-- Activation function.                                            -->
<!ENTITY % ACTIVATION-FUNCTION "( threshold | logistic | tanh |
    identity | softmax )" >

<!-- Neural network neuron id and id reference.                      -->
<!ENTITY              % NN-NEURON-ID                "CDATA" >
<!ENTITY              % NN-NEURON-IDREF             "CDATA" >


<!ELEMENT NeuralNetwork ( Extension*, MiningSchema, ModelStats?, NeuralInputs,
    ( NeuralLayer+ ), NeuralOutputs?, Extension* ) >
<!ATTLIST NeuralNetwork
    modelName               CDATA                            #IMPLIED
    functionName            %MINING-FUNCTION;                #REQUIRED
    algorithmName           CDATA                            #IMPLIED
    activationFunction      %ACTIVATION-FUNCTION;            #REQUIRED
    threshold               %REAL-NUMBER;                    #IMPLIED
>

<!ELEMENT NeuralInputs ( Extension*, NeuralInput+ ) >

<!ELEMENT NeuralInput ( Extension*, DerivedField ) >
<!ATTLIST NeuralInput
    id                      %NN-NEURON-ID;                   #REQUIRED
>

<!ELEMENT NeuralLayer ( Extension*, Neuron+ ) >
<!ATTLIST NeuralLayer
    numberOfNeurons         %INT-NUMBER;                     #IMPLIED
    activationFunction      %ACTIVATION-FUNCTION;            #IMPLIED
>

<!ELEMENT Neuron ( Extension*, Con+ ) >
<!ATTLIST Neuron
    id                      %NN-NEURON-ID;                   #REQUIRED
    bias                    %REAL-NUMBER;                    #IMPLIED
    activationFunction      %ACTIVATION-FUNCTION;            #IMPLIED
    threshold               %REAL-NUMBER;                    #IMPLIED
>

<!ELEMENT Con ( Extension* ) >
<!ATTLIST Con
    from                    %NN-NEURON-IDREF;                #REQUIRED
    weight                  %REAL-NUMBER;                    #REQUIRED
>

<!ELEMENT NeuralOutputs ( Extension*, NeuralOutput+ ) >

<!ELEMENT NeuralOutput ( Extension*, DerivedField ) >
<!ATTLIST NeuralOutput
    outputNeuron            %NN-NEURON-IDREF;                #REQUIRED
>




<!-- =========      Clustering Model    =========================== -->


<!ELEMENT ClusteringModel
    ( Extension*, MiningSchema, ModelStats?,
      ComparisonMeasure, ClusteringField*, CenterFields?, Cluster+, Extension*) >
<!ATTLIST ClusteringModel
    modelName               CDATA                           #IMPLIED
    functionName            %MINING-FUNCTION;               #REQUIRED
    algorithmName           CDATA                           #IMPLIED
    modelClass  ( centerBased | distributionBased )         #REQUIRED
    numberOfClusters        %INT-NUMBER;                    #REQUIRED
>

<!ELEMENT CenterFields ( DerivedField+ ) >

<!ELEMENT Cluster (Extension*, (%NUM-ARRAY;)?, Partition?, Covariances?)>
<!ATTLIST Cluster
    name                CDATA           #IMPLIED
>


<!ELEMENT Covariances  (Matrix) >

<!ENTITY % CMP-FCT "(absDiff | gaussSim | delta | equal | table)" >

<!ELEMENT ClusteringField ( Extension*, Comparisons? ) >
<!ATTLIST ClusteringField
        field           %FIELD-NAME;    #REQUIRED
        fieldWeight     %REAL-NUMBER;   #IMPLIED
        similarityScale %REAL-NUMBER;   #IMPLIED
        compareFunction %CMP-FCT;       #IMPLIED
>


<!ELEMENT Comparisons ( Extension*, Matrix ) >

<!ELEMENT Matrix   ( ((%NUM-ARRAY;)+ ) | ( MatCell+ ) )? >
<!ATTLIST Matrix
    kind        ( diagonal | symmetric | any )  "any"
    nbRows              %INT-NUMBER;    #IMPLIED
    nbCols              %INT-NUMBER;    #IMPLIED
    diagDefault         %REAL-NUMBER;   #IMPLIED
    offDiagDefault      %REAL-NUMBER;   #IMPLIED
>


<!ELEMENT MatCell (#PCDATA)>
<!ATTLIST MatCell
    row                 %INT-NUMBER;           #REQUIRED
    col                 %INT-NUMBER;           #REQUIRED
>


<!ELEMENT ComparisonMeasure (Extension*,
        ( euclidean      | squaredEuclidean    | chebychev
        | cityBlock      | minkowski            | simpleMatching
        | jaccard        | tanimoto             | binarySimilarity ) )
>

<!ATTLIST ComparisonMeasure
        kind            (distance |similarity)  #REQUIRED
        compareFunction %CMP-FCT;               #IMPLIED
        minimum         %NUMBER;                #IMPLIED
        maximum         %NUMBER;                #IMPLIED
>

<!ELEMENT euclidean             EMPTY>

<!ELEMENT squaredEuclidean      EMPTY>

<!ELEMENT cityBlock     EMPTY>

<!ELEMENT chebychev             EMPTY>

<!ELEMENT minkowski             EMPTY>
<!ATTLIST minkowski
        p-parameter     %NUMBER; #REQUIRED
>

<!ELEMENT simpleMatching        EMPTY>

<!ELEMENT jaccard               EMPTY>

<!ELEMENT tanimoto              EMPTY>

<!ELEMENT binarySimilarity      EMPTY>
<!ATTLIST binarySimilarity
        c00-parameter   %NUMBER; #REQUIRED
        c01-parameter   %NUMBER; #REQUIRED
        c10-parameter   %NUMBER; #REQUIRED
        c11-parameter   %NUMBER; #REQUIRED
        d00-parameter   %NUMBER; #REQUIRED
        d01-parameter   %NUMBER; #REQUIRED
        d10-parameter   %NUMBER; #REQUIRED
        d11-parameter   %NUMBER; #REQUIRED
>




<!-- =========      Association Rules    =========================== -->

 <!ENTITY % ELEMENT-ID   "CDATA">


<!ELEMENT AssociationModel (Extension*, MiningSchema, Item+, 
                            Itemset+, AssociationRule+, Extension*)>

<!ATTLIST  AssociationModel
        modelName             CDATA         #IMPLIED
        functionName          %MINING-FUNCTION; #REQUIRED
        algorithmName         CDATA         #IMPLIED
        numberOfTransactions  %INT-NUMBER;  #REQUIRED
        maxNumberOfItemsPerTA %INT-NUMBER;  #IMPLIED
        avgNumberOfItemsPerTA %INT-NUMBER;  #IMPLIED
        minimumSupport        %PROB-NUMBER; #REQUIRED
        minimumConfidence     %PROB-NUMBER; #REQUIRED
        lengthLimit           %INT-NUMBER;  #IMPLIED
        numberOfItems         %INT-NUMBER;  #REQUIRED
        numberOfItemsets      %INT-NUMBER;  #REQUIRED
        numberOfRules         %INT-NUMBER;  #REQUIRED
    >
    <!-- Attribute description:
        numberOfTransactions:
            The number of transactions (baskets of items) contained
            in the input data
        maxNumberOfItemsPerTA :
            The number of items contained in the largest transaction
        avgNumberOfItemsPerTA:
            The average number of items contained in a transaction
        minimumSupport:
            The minimum relative support value
            (#supporting transactions / #total transactions)
            satisfied by all rules
        minimumConfidence:
            The minimum confidence value satisfied by all rules.
            Confidence is calculated as
            (support (rule) / support(antecedent))
        lengthLimit:
            The maximum number of items contained in a rule which was
            used to limit the number of rules.
        numberOfItems:
            The number of different items contained in the input data
        numberOfItemsets:
            The number of itemsets contained in the model
        numberOfRules:
            The number of rules contained in the model               -->


<!-- Item: items contained in itemsets.                              -->
<!ELEMENT Item EMPTY>
    <!ATTLIST Item
        id                    %ELEMENT-ID;  #REQUIRED
        value                 CDATA         #REQUIRED
        mappedValue           CDATA         #IMPLIED
        weight                %REAL-NUMBER; #IMPLIED
    >
    <!-- Attribute description:
        id:
            An identification to uniquely identify an item
        value:
            The value of the item as in the input data
        mappedValue:
            Optional, a value to which the original item value
            is mapped.
        weight:
            The weight of the item.                                  -->

<!-- Itemset: item sets which are contained in rules.                -->
<!ELEMENT Itemset ( Extension*, ItemRef+ )>
    <!ATTLIST Itemset
        id                    %ELEMENT-ID;  #REQUIRED
        support               %PROB-NUMBER; #IMPLIED
        numberOfItems         %INT-NUMBER;  #IMPLIED
    >
    <!-- Attribute description:
        id:
            An identification to uniquely identify an itemset
        support:
            The relative support of the itemset
        numberOfItems:
            The number of items contained in this itemset            -->

<!-- ItemRef: subelement for item references to point to
    elements of type item.                                           -->
<!ELEMENT ItemRef EMPTY>
    <!ATTLIST ItemRef
        itemRef               %ELEMENT-ID;  #REQUIRED
    >
    <!-- Attribute description:
        itemRef:
            The id value of an item element                          -->

<!-- AssociationRule: element of the form
    <antecedent itemset> => <consequent itemset>                     -->
<!ELEMENT AssociationRule ( Extension* ) >
    <!ATTLIST AssociationRule
        support               %PROB-NUMBER; #REQUIRED
        confidence            %PROB-NUMBER; #REQUIRED
        antecedent            %ELEMENT-ID;  #REQUIRED
        consequent            %ELEMENT-ID;  #REQUIRED
    >
    <!-- Attribute description:
        support:
            The relative support of the rule
        confidence:
            The confidence of the rule
        antecedent:
            The id value of the itemset which is the antecedent of
            the rule
        consequent:
            The id value of the itemset which is the consequent of
            the rule                                                 -->




<!-- =========      Tree Classification  =========================== -->


<!ELEMENT TreeModel (Extension*, MiningSchema, ModelStats?,
                     Node, Extension*)>

<!ATTLIST TreeModel
   modelName                  CDATA                         #IMPLIED
   functionName               %MINING-FUNCTION;             #REQUIRED
   algorithmName              CDATA                         #IMPLIED
   splitCharacteristic        (binarySplit | multiSplit) "multiSplit"
>

<!ENTITY % PREDICATE "( SimplePredicate | CompoundPredicate |
                        SimpleSetPredicate | True | False  ) " >

<!ELEMENT Node ( Extension*, (%PREDICATE;), ScoreDistribution*, Node* )>
<!ATTLIST Node
   score                      CDATA                          #REQUIRED
   recordCount                %NUMBER;                       #IMPLIED
>

<!ELEMENT SimplePredicate EMPTY>
<!ATTLIST SimplePredicate
     field              %FIELD-NAME;                          #REQUIRED
     operator           (equal | notEqual |
                         lessThan | lessOrEqual |
                         greaterThan | greaterOrEqual)        #REQUIRED
     value              CDATA                                 #REQUIRED
>

<!ELEMENT CompoundPredicate ( %PREDICATE; , (%PREDICATE;)+ ) >
<!ATTLIST CompoundPredicate
     booleanOperator     (or|and|xor|surrogate)     #REQUIRED >


<!ELEMENT SimpleSetPredicate ( Array ) >
<!ATTLIST SimpleSetPredicate
     field                 %FIELD-NAME;                    #REQUIRED
     booleanOperator       (isIn|isNotIn)                  #REQUIRED
>

<!ELEMENT True EMPTY>

<!ELEMENT False EMPTY>

<!ELEMENT ScoreDistribution EMPTY>
<!ATTLIST ScoreDistribution
     value                      CDATA                         #REQUIRED
     recordCount                %NUMBER;                      #REQUIRED
>

<!-- =========      Simple Regression   =========================== -->

<!ELEMENT RegressionModel (Extension*, MiningSchema?, ModelStats?, 
                           RegressionTable+, Extension*) >
<!ATTLIST RegressionModel
    modelName                     CDATA                                                #IMPLIED
    functionName                  CDATA                                                #REQUIRED
    algorithmName                 CDATA                                                #IMPLIED
    modelType                     (linearRegression | 
                                   stepwisePolynomialRegression |
                                   logisticRegression)                                 #REQUIRED
    targetFieldName               %FIELD-NAME;                                         #REQUIRED
    normalizationMethod           (none | simplemax | softmax)                         "none"
>


<!ELEMENT RegressionTable ((NumericPredictor*), (CategoricalPredictor*))>
<!ATTLIST RegressionTable
    intercept                      %REAL-NUMBER;        #REQUIRED
    targetCategory                 CDATA                #IMPLIED
>

<!ELEMENT NumericPredictor EMPTY>
<!ATTLIST NumericPredictor
    name                           %FIELD-NAME;         #REQUIRED
    exponent                       %INT-NUMBER;         #REQUIRED
    coefficient                    %REAL-NUMBER;        #REQUIRED
    mean                           %REAL-NUMBER;        #IMPLIED
>
<!ELEMENT CategoricalPredictor EMPTY>
<!ATTLIST CategoricalPredictor
    name                           %FIELD-NAME;         #REQUIRED
    value                          CDATA                #REQUIRED
    coefficient                    %REAL-NUMBER;        #REQUIRED
>


<!-- =========      General Regression   =========================== -->


<!ELEMENT GeneralRegressionModel (
    Extension*,
    ParameterList,
    FactorList?,
    CovariateList?,
    PPMatrix?,
    PCovMatrix?,
    ParamMatrix, Extension*)>
<!ATTLIST GeneralRegressionModel
    targetVariableName    %FIELD-NAME;                                          #REQUIRED
    modelType             (regression | generalLinear | 
                           logLinear | multinomialLogistic)                     #REQUIRED
    modelName             CDATA                                                 #IMPLIED 
    functionName          %MINING-FUNCTION;                                     #REQUIRED 
    algorithmName         CDATA                                                 #IMPLIED 
>

<!ELEMENT ParameterList (Parameter+)>
<!ELEMENT Parameter EMPTY>
<!ATTLIST Parameter
    name                           CDATA           #REQUIRED
    label                          CDATA           #IMPLIED
>

<!ELEMENT FactorList (Predictor*)>
<!ELEMENT CovariateList (Predictor*)>
<!ELEMENT Predictor EMPTY>
<!ATTLIST Predictor
    name                           %FIELD-NAME;    #REQUIRED
>

<!ELEMENT PPMatrix (PPCell+)>
<!ELEMENT PPCell EMPTY>
<!ATTLIST PPCell
    value                          CDATA           #REQUIRED
    predictorName                  %FIELD-NAME;    #REQUIRED
    parameterName                  CDATA           #REQUIRED
    targetCategory                 CDATA           #IMPLIED
>

<!ELEMENT PCovMatrix (PCovCell+)>
<!ELEMENT PCovCell EMPTY>
<!ATTLIST PCovCell
    pRow                           CDATA           #REQUIRED
    pCol                           CDATA           #REQUIRED
    tRow                           CDATA           #REQUIRED
    tCol                           CDATA           #REQUIRED
    value                          %REAL-NUMBER;   #REQUIRED
    targetCategory                 CDATA           #IMPLIED
>



<!ELEMENT ParamMatrix (PCell+)>
<!ELEMENT PCell EMPTY>
<!ATTLIST PCell
    targetCategory                 CDATA           #REQUIRED
    parameterName                  CDATA           #REQUIRED
    beta                           %REAL-NUMBER;   #REQUIRED
    df                             %INT-NUMBER;    #IMPLIED
>

<!-- =========      SequenceModel     =========================== -->

<!ELEMENT SequenceModel ( Extension*, MiningSchema, Item*, Itemset*,
                 SetPredicate*, Sequence+, SequenceRule*, Extension* ) >
<!ATTLIST SequenceModel
    modelName                      CDATA               #IMPLIED
    functionName                   %MINING-FUNCTION;   #REQUIRED
    algorithmName                  CDATA               #IMPLIED
    numberOfTransactions           %INT-NUMBER;        #REQUIRED
    maxNumberOfItemsPerTransaction %INT-NUMBER;        #REQUIRED
    avgNumberOfItemsPerTransaction %REAL-NUMBER;       #REQUIRED
    minimumSupport                 %PROB-NUMBER;       #REQUIRED
    minimumConfidence              %PROB-NUMBER;       #REQUIRED
    lengthLimit                    %INT-NUMBER;        #IMPLIED
    numberOfItems                  %INT-NUMBER;        #REQUIRED
    numberOfSets                   %INT-NUMBER;        #REQUIRED
    numberOfSequences              %INT-NUMBER;        #REQUIRED
    numberOfRules                  %INT-NUMBER;        #REQUIRED
    timeWindowWidth                %INT-NUMBER;        #IMPLIED
    minimumTime                    %INT-NUMBER;        #IMPLIED
    maximumTime                    %INT-NUMBER;        #IMPLIED
>
<!-- Attribute description:

    numberOfTransactions:
        The number of transactions (sequences) contained in the
        input data.
    maxNumberOfItemsPerTransaction:
        The maximum number of items per transaction.
    avgNumberOfItemsPerTransaction:
        The average number of items per transaction.
    minimumSupport:
        The minimum relative support value (#supporting transactions /
        #total transactions) satisfied by all sequences.
    minimumConfidence:
        The minimum confidence value satisfied by all sequences.
    lengthLimit:
        The maximum sequence size.
    numberOfItems:
        The number of different items contained in the input data.
    numberOfSets:
        The number of item sets contained in the model.
    numberOfRules:
        The number of rules produced by the model.
    timeWindowWidth:
        The maximum time interval between first and last sets.
    minimumTime:
        The minimum inter-set time interval in counted sequences.
        It is user-specified.
    maximumTime:
        The maximum inter-set time interval in counted sequences.
        It is user-specified.                                         -->

<!-- Elements Item, Itemset, ItemRef are defined in Association Model -->

<!-- SetReference: item set reference id.                             -->
<!ELEMENT SetReference EMPTY>
<!ATTLIST SetReference
    setId                          %ELEMENT-ID;   #REQUIRED
>
<!-- Attribute description:
    setId:
        The id value of an Itemset or SetPredicate element.           -->

<!-- Definitions for SetPredicate.                                    -->

<!ELEMENT SetPredicate ( %STRING-ARRAY;  ) >
<!ATTLIST SetPredicate
    id                             %ELEMENT-ID;    #IMPLIED
    field                          %FIELD-NAME;    #REQUIRED
    operator                       CDATA           #FIXED "supersetOf"
>

<!-- Definitions for Sequence.                                       -->

<!-- States whether or not this item set occurred within the same
    time window as the previous one.                                 -->
<!ENTITY % DELIMITER "( sameTimeWindow | acrossTimeWindows )">

<!-- Shows if gap exists or is known.                                -->
<!ENTITY % GAP "( true | false | unknown )">

<!-- Delimiter can be placed between item sets, and also between
    sequences.                                                       -->
<!ELEMENT Delimiter EMPTY>
<!ATTLIST Delimiter
    delimiter                      %DELIMITER;    #REQUIRED
    gap                            %GAP;          #REQUIRED
>
<!-- Attribute description:
    delimiter:
        It states whether or not this item set occurred within the
        same transaction as the previous one.
    gap:
        It shows the existence of a sequence between this and the
        previous item set.                                           -->

<!-- Item set that follows another item set in a sequence.           -->
<!ENTITY % FOLLOW_SET  "( Delimiter, SetReference )" >

<!-- Sequence of item sets found in the rules.                       -->
<!ELEMENT Sequence ( SetReference, (%FOLLOW_SET;)* ) >
<!ATTLIST Sequence
    id                             %ELEMENT-ID;   #REQUIRED
    numberOfSets                   %INT-NUMBER;   #IMPLIED
    occurrence                     %INT-NUMBER;   #IMPLIED
    support                        %REAL-NUMBER;  #IMPLIED

>
<!-- Attribute description:
    id:
        A unique sequence identification (reference id).
    numberOfSets:
        The number of item sets contained in this sequence.
    occurrence:
        The number of objects in the data for which this
        sequence holds true.
    support:
        The relative support of the sequence
        (#supporting occurrences / #total occurrences).              -->


<!-- SequenceReference: sequence reference id.                       -->
<!ELEMENT SequenceReference EMPTY>
<!ATTLIST SequenceReference
    seqId                          %ELEMENT-ID;   #REQUIRED
>
<!-- Attribute description:
    seqId:
        The id value of a Sequence element.                          -->

<!-- Definitions for SequenceRule.                                   -->

<!-- Time: contains time gap information.                            -->
<!ELEMENT Time EMPTY>
<!ATTLIST Time
    min                            %NUMBER;       #REQUIRED
    max                            %NUMBER;       #REQUIRED
    mean                           %NUMBER;       #IMPLIED
>
<!-- Attribute description:
    min:
        The minimum time between item sets in a sequence
        (or between an antecedent and consequent).
    max:
        The maximum time between item sets in a sequence
        (or between an antecedent and consequent).
    mean:
        The mean time between item sets in a sequence
        (or between an antecedent and consequent).                   -->

<!-- Antecedent and Consequent Sequences.                            -->
<!ENTITY % SEQUENCE  "( SequenceReference, Time* )" >
<!ELEMENT AntecedentSequence ( %SEQUENCE; ) >
<!ELEMENT ConsequentSequence ( %SEQUENCE; ) >

<!-- A Sequence Rule.                                                -->
<!ELEMENT SequenceRule ( Extension*, AntecedentSequence, Delimiter, Time,
                         ConsequentSequence) >
<!ATTLIST SequenceRule
    id                             %ELEMENT-ID;   #REQUIRED
    numberOfSets                   %INT-NUMBER;   #REQUIRED
    occurrence                     %INT-NUMBER;   #REQUIRED
    support                        %PROB-NUMBER;  #REQUIRED
    confidence                     %REAL-NUMBER;  #REQUIRED
>
<!-- Attribute description:
    id:
        The unique id of this sequence rule
    support:
        The support value (#supporting occurrences / #total
        occurrences).
    numberOfSets:
        The number of item sets in the combined sequence that includes
        both antecedent and consequent.
    occurrence:
        The number of times this combined sequence occurs.
    confidence:
        probability of the consequent following the antecedent       -->


<!-- =========      Naive Bayes Model    =========================== -->

<!ELEMENT    NaiveBayesModel (Extension*, MiningSchema, ModelStats?,
             BayesInputs, BayesOutput, Extension* )>
<!ATTLIST    NaiveBayesModel
    modelName        CDATA                                #IMPLIED
    threshold        %REAL-NUMBER;                        #REQUIRED
    functionName     %MINING-FUNCTION;                    #REQUIRED
    algorithmName    CDATA                                #IMPLIED
>
<!ELEMENT    BayesInputs  ( BayesInput+ )>

<!ELEMENT    BayesInput   ( Extension*, DerivedField?, PairCounts+ ) >
<!ATTLIST    BayesInput
    fieldName        CDATA                                #REQUIRED
>
<!ELEMENT    BayesOutput  ( Extension*, TargetValueCounts )>
<!ATTLIST    BayesOutput
    fieldName        CDATA                                #REQUIRED
>
<!ELEMENT PairCounts ( TargetValueCounts )>
 <!ATTLIST   PairCounts
     value           CDATA                                #REQUIRED
>
<!ELEMENT    TargetValueCounts ( TargetValueCount+ )>
<!ELEMENT    TargetValueCount   EMPTY >
<!ATTLIST    TargetValueCount
     value           CDATA                                #REQUIRED
     count           %REAL-NUMBER;                        #REQUIRED
>
